
{% extends 'default_frame.twig' %}

{% block main %}

<h1>クレジットカード情報の入力</h1>
    <form method="post"
          action="{{ url('paylite_credit_card_for_token_payment') }}" id="createTokenForm" novalidate>
        <input type='hidden' value='' name='token' id="token" />
        {{ form_widget(form._token) }}
        {{ form_widget(form.token) }}
        {{ form_widget(form.contract_code) }}
        {{ form_errors(form.contract_code) }}
        {{ form_errors(form.token) }}
    </form>
    <form method="post" id="formSubmit" action="javascript:void(0);">
        <div  class="dl_table" id="payment_form_body">
            <dl>
                <dt>
                    <label class="ec-label required" for="credit_card_for_token_payment_credit_card_number">クレジットカード番号</label><span class="required">必須</span>
                </dt>
                <dd>
                    <div class="ec-halfInput {% if form.credit_card_number.vars.errors is not empty %}has-error{% endif %}">
                        {{ form_widget(form.credit_card_number) }}
                        {{ form_errors(form.credit_card_number) }}
                    </div>
                </dd>
            </dl>
            <dl>
                <dt>
                    <label class="ec-label required" for="credit_card_for_token_payment_credit_card_number">有効期限</label><span class="required">必須</span>
                </dt>
                <dd>
                    <div class="ec-select {% if form.expiration_month.vars.errors is not empty %}has-error{% endif %}">
                        {{ form_widget(form.expiration_month) }}
                        {{ form_errors(form.expiration_month) }}
                    </div>
                    <div class="ec-select {% if form.expiration_year.vars.errors is not empty %}has-error{% endif %}">
                        {{ form_widget(form.expiration_year) }}
                        {{ form_errors(form.expiration_year) }}
                    </div>
                </dd>
            </dl>
            <dl>
                <dt>
                    <label class="ec-label required" for="credit_card_for_token_payment_security_code">セキュリティコード</label><span class="required">必須</span>
                </dt>
                <dd>
                    <div class="ec-halfInput {% if form.security_code.vars.errors is not empty %}has-error{% endif %}">
                        {{ form_widget(form.security_code) }}
                        {{ form_errors(form.security_code) }}
                    </div>
                </dd>
            </dl>
            <dl>
                <dt>
                    <label class="ec-label required" for="credit_card_for_token_payment_holder_name">名義人</label><span class="required">必須</span>
                </dt>
                <dd>
                    <div class="ec-halfInput {% if form.holder_name.vars.errors is not empty %}has-error{% endif %}">
                        {{ form_widget(form.holder_name) }}
                        {{ form_errors(form.holder_name) }}
                    </div>
                </dd>
            </dl>
        </div>
        <div class="row no-padding padding-top">
            <div class="btn_group col-sm-offset-4 col-sm-4">
                <div class="ec-off4Grid__cell">
                    <button id="formSubmit" type="submit" class="ec-blockBtn--action btn btn-primary btn-block prevention-mask">購入する </button>
                    <a href="{{ path('paylite_shopping_payment_back') }}?order_number={{ order_number }}" class="btn btn-info btn-block">戻る</a>
                </div>
            </div>
        </div>
    </form>
    {% if token is defined %}
        <form id='checkoutForm' action='{{ url('paylite_shopping_checkout') }}' method='post'>
            {# 取得したトークンを設定するプレースホルダ #}
            <input type='hidden' value='{{ token }}' name='token' id="token" />
            {{ form_widget(checkoutForm._token) }}
        </form>
    {% endif %}

{% endblock %}
{% block stylesheet %}
    <style>
        .padding-top{ padding-top: 20px!important;}
        .ec-select {  margin-bottom: 16px; }
        .ec-label { display: inline-block;font-weight: bold;margin-bottom: 5px;}
        .bg-load-overlay {
            background-color: #000;
            filter: alpha(opacity=50);
            opacity: .5;
            box-sizing: border-box;
            position: fixed;
            display: flex;
            flex-flow: column nowrap;
            align-items: center;
            justify-content: space-around;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 2147483647;
        }
    </style>
{% endblock stylesheet %}

{% block javascript %}
<script src='{{ url_token_js }}'></script>
<script>
    {# トークンを送信 #}
    const gmo_token_error_messages = {
        "100" : "カード番号に数字以外の文字が含まれています",
        "101" : "カード番号の桁数が正しくありません",
        "110" : "有効期限が入力されていません",
        "111" : "有効期限に数値以外の文字が含まれています",
        "112" : "有効期限は6又は4ケタで指定してください",
        "113" : "有効期限は有効な年月を指定してください",
        "121" : "セキュリティコードに数字以外の文字が含まれています",
        "122" : "セキュリティコードは4桁以内で指定してください",
        "131" : "名義人に無効な文字が含まれています",
        "132" : "名義人は50桁以内で指定してください",
    };

    const gmo_token_error_element = {
        "100" : "credit_card_number",
        "101" : "credit_card_number",
        "110" : "expiration_month",
        "111" : "expiration_month",
        "112" : "expiration_month",
        "113" : "expiration_month",
        "121" : "security_code",
        "122" : "security_code",
        "131" : "holder_name",
        "132" : "holder_name",
    };

    function getErrorMessage(error_code) {
        if (typeof gmo_token_error_messages[error_code] == null) {
            return  + "決済エラーです。";
        } else {
            return gmo_token_error_messages[error_code];
        }
    }

    function execTrade(response) {
        console.log(response);
        if (response.resultCode != '000') {
            // エラーを表示
            document.getElementById('credit_card_for_token_payment_token').value = '';
            alert(getErrorMessage(response.resultCode));
            loadingOverlay('hide');
        } else {
            // フォームに値を設定して送信
            document.getElementById('credit_card_for_token_payment_token').value = response.tokenObject.token;
            document.getElementById('createTokenForm').submit();
        }
    }
    /**
     * オーバーレイ処理を行う関数
     */
    function loadingOverlay(action) {
        if (action == 'hide') {
            $('.bg-load-overlay').remove();
        } else {
            $overlay = $('<div class="bg-load-overlay">');
            $('body').append($overlay);
        }
    }

    $(function() {
        {# トークン発行 #}
        $('#formSubmit').on('submit', function(e) {
            e.preventDefault();
            var cardObj = {};
            var year = document.getElementById('credit_card_for_token_payment_expiration_year').value;
            var month = ('00' + document.getElementById('credit_card_for_token_payment_expiration_month').value).slice(-2)
            cardObj.cardno = document.getElementById('credit_card_for_token_payment_credit_card_number').value;
            cardObj.expire = year + month;
            cardObj.securitycode = document.getElementById('credit_card_for_token_payment_security_code').value;
            cardObj.holdername = document.getElementById('credit_card_for_token_payment_holder_name').value;
            EpsilonToken.init(document.getElementById("credit_card_for_token_payment_contract_code").value);
            EpsilonToken.getToken(cardObj, execTrade);
        });

        {% if token is defined %}
            loadingOverlay();
            document.getElementById('token').value = '{{ token }}';
            document.getElementById('checkoutForm').submit()
        {% endif %}
    });
</script>
{% endblock javascript %}
