<?php
/*
* This file is part of EC-CUBE
*
* Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
* https://www.ec-cube.co.jp/
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/

namespace Plugin\MailMagazine\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Common\Constant;
use Eccube\Util\Str;

/**
 * CustomerRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MailMagazineCustomerRepository extends EntityRepository
{
    public $app;

    public function setApplication($app)
    {
        $this->app = $app;
    }

    /**
     * メールマガジンを受け取るカスタマーIDの配列を取得する.
     */
    protected function getMailmagaCustomerIds()
    {
        $mailmagaCustomerIds = array();

        $MailmagaCustomers = $this->app['eccube.plugin.mail_magazine.repository.mail_magazine_mailmaga_customer']
                                ->findBy(array('mailmaga_flg' => Constant::ENABLED));

        foreach ($MailmagaCustomers as $MailmagaCustomer) {
            $mailmagaCustomerIds[] = $MailmagaCustomer->getCustomerId();
        }

        return array_unique($mailmagaCustomerIds);
    }

    /**
     * @param $searchData
     *
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getQueryBuilderBySearchData($searchData)
    {
        // メルマガを受け取るカスタマーのIDを取得する
        $mailmagaCustomerIds = $this->getMailmagaCustomerIds();

        $qb = $this->createQueryBuilder('c')
            ->select('c')
            ->andWhere('c.del_flg = 0');

        // メルマガを受け取るカスタマーのみに絞る
        if (count($mailmagaCustomerIds) > 0) {
            // メルマガ送付カスタマーがいれば対象カスタマーのみ対象とする
            $qb->andWhere($qb->expr()->in('c.id', $mailmagaCustomerIds));
        } else {
            // メルマガ送付カスタマーがいなければ強制的に非表示にする条件を追加する
            $qb->andWhere('c.id < 0');
        }

        if (isset($searchData['multi']) && Str::isNotBlank($searchData['multi'])) {
            //スペース除去
            $clean_key_multi = preg_replace('/\s+|[　]+/u', '', $searchData['multi']);
            if (preg_match('/^\d+$/', $clean_key_multi)) {
                $qb
                    ->andWhere('c.id = :customer_id')
                    ->setParameter('customer_id', $clean_key_multi);
            } else {
                $qb
                    ->andWhere('CONCAT(c.name01, c.name02) LIKE :name OR CONCAT(c.kana01, c.kana02) LIKE :kana OR c.email LIKE :email')
                    ->setParameter('name', '%'.$clean_key_multi.'%')
                    ->setParameter('kana', '%'.$clean_key_multi.'%')
                    ->setParameter('email', '%'.$clean_key_multi.'%');
            }
        }

        // Pref
        if (!empty($searchData['pref']) && $searchData['pref']) {
            $qb
                ->andWhere('c.Pref = :pref')
                ->setParameter('pref', $searchData['pref']->getId());
        }

        // sex
        if (!empty($searchData['sex']) && count($searchData['sex']) > 0) {
            $sexs = array();
            foreach ($searchData['sex'] as $sex) {
                $sexs[] = $sex->getId();
            }

            $qb
                ->andWhere($qb->expr()->in('c.Sex', ':sexs'))
                ->setParameter('sexs', $sexs);
        }
        // birth_month
        if (isset($searchData['birth_month']) && is_int($searchData['birth_month'])) {
            //Birth month start from 0 so we need plus 1.
            ++$searchData['birth_month'];
            $birthMonth = $searchData['birth_month'];
            if ($searchData['birth_month'] < 10) {
                $birthMonth = '0'.$searchData['birth_month'];
            }
            //because can not use SUBSTRING with timestamp field. Use concat for convert to date => String(can not use convert func in doctrine)
            $qb
                ->andWhere("SUBSTRING(CONCAT(c.birth, '0'), 6, 2) = :birth_month")
                ->setParameter('birth_month', $birthMonth);
        }

        // birth
        if (!empty($searchData['birth_start']) && $searchData['birth_start']) {
            $date = $searchData['birth_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth >= :birth_start')
                ->setParameter('birth_start', $date);
        }
        if (!empty($searchData['birth_end']) && $searchData['birth_end']) {
            $date = $searchData['birth_end']
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.birth < :birth_end')
                ->setParameter('birth_end', $date);
        }

        // tel
        if (!empty($searchData['tel01']) && $searchData['tel01']) {
            $qb
                ->andWhere('c.tel01 = :tel01')
                ->setParameter('tel01', $searchData['tel01']);
        }
        if (!empty($searchData['tel02']) && $searchData['tel02']) {
            $qb
                ->andWhere('c.tel02 = :tel02')
                ->setParameter('tel02', $searchData['tel02']);
        }
        if (!empty($searchData['tel03']) && $searchData['tel03']) {
            $qb
                ->andWhere('c.tel03 = :tel03')
                ->setParameter('tel03', $searchData['tel03']);
        }

        // buy_total
        if (!empty($searchData['buy_total_start']) && $searchData['buy_total_start']) {
            $qb
                ->andWhere('c.buy_total >= :buy_total_start')
                ->setParameter('buy_total_start', $searchData['buy_total_start']);
        }
        if (!empty($searchData['buy_total_end']) && $searchData['buy_total_end']) {
            $qb
                ->andWhere('c.buy_total <= :buy_total_end')
                ->setParameter('buy_total_end', $searchData['buy_total_end']);
        }

        // buy_times
        if (!empty($searchData['buy_times_start']) && $searchData['buy_times_start']) {
            $qb
                ->andWhere('c.buy_times >= :buy_times_start')
                ->setParameter('buy_times_start', $searchData['buy_times_start']);
        }
        if (!empty($searchData['buy_times_end']) && $searchData['buy_times_end']) {
            $qb
                ->andWhere('c.buy_times <= :buy_times_end')
                ->setParameter('buy_times_end', $searchData['buy_times_end']);
        }

        // create_date
        if (!empty($searchData['create_date_start']) && $searchData['create_date_start']) {
            $date = $searchData['create_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date >= :create_date_start')
                ->setParameter('create_date_start', $date);
        }
        if (!empty($searchData['create_date_end']) && $searchData['create_date_end']) {
            $date = $searchData['create_date_end']
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.create_date < :create_date_end')
                ->setParameter('create_date_end', $date);
        }

        // update_date
        if (!empty($searchData['update_date_start']) && $searchData['update_date_start']) {
            $date = $searchData['update_date_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date >= :update_date_start')
                ->setParameter('update_date_start', $date);
        }
        if (!empty($searchData['update_date_end']) && $searchData['update_date_end']) {
            $date = $searchData['update_date_end']
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.update_date < :update_date_end')
                ->setParameter('update_date_end', $date);
        }

        // last_buy
        if (!empty($searchData['last_buy_start']) && $searchData['last_buy_start']) {
            $date = $searchData['last_buy_start']
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date >= :last_buy_start')
                ->setParameter('last_buy_start', $date);
        }
        if (!empty($searchData['last_buy_end']) && $searchData['last_buy_end']) {
            $date = $searchData['last_buy_end']
                ->modify('+1 days')
                ->format('Y-m-d H:i:s');
            $qb
                ->andWhere('c.last_buy_date < :last_buy_end')
                ->setParameter('last_buy_end', $date);
        }

        // status
        if (!empty($searchData['customer_status']) && count($searchData['customer_status']) > 0) {
            $customerStatus = array();
            foreach ($searchData['customer_status'] as $val) {
                $customerStatus[] = $val->getId();
            }
            $qb
                ->andWhere($qb->expr()->in('c.Status', ':statuses'))
                ->setParameter('statuses', $customerStatus);
        }

        // buy_product_name、buy_product_code
        if (!empty($searchData['buy_product_code']) && $searchData['buy_product_code']) {
            $qb
                ->leftJoin('c.Orders', 'o')
                ->leftJoin('o.OrderDetails', 'od')
                ->andWhere('od.product_name LIKE :buy_product_name OR od.product_code LIKE :buy_product_name')
                ->setParameter('buy_product_name', '%'.$searchData['buy_product_code'].'%');
        }

        // Order By
        $qb->addOrderBy('c.id', 'ASC');

        return $qb;
    }

    /**
     * 検索条件と一致したcustomerを取得する.
     *
     * @param array $searchData
     *
     * @return array
     */
    public function getCustomerBySearchData($searchData)
    {
        $qb = $this->getQueryBuilderBySearchData($searchData);

        return $qb->getQuery()->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
    }
}
