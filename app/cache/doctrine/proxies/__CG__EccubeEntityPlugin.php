<?php

namespace DoctrineProxy\__CG__\Eccube\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Plugin extends \Eccube\Entity\Plugin implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'code', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'class_name', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'enable', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'del_flg', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'source', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'update_status', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'new_version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'last_update_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'product_url', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'eccube_version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'PluginEventHandlers');
        }

        return array('__isInitialized__', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'id', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'name', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'code', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'class_name', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'enable', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'create_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'del_flg', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'source', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'update_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'update_status', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'new_version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'last_update_date', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'product_url', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'eccube_version', '' . "\0" . 'Eccube\\Entity\\Plugin' . "\0" . 'PluginEventHandlers');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Plugin $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', array($name));

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', array());

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCode($code)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCode', array($code));

        return parent::setCode($code);
    }

    /**
     * {@inheritDoc}
     */
    public function getCode()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCode', array());

        return parent::getCode();
    }

    /**
     * {@inheritDoc}
     */
    public function setClassName($className)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClassName', array($className));

        return parent::setClassName($className);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassName', array());

        return parent::getClassName();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnable($enable)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnable', array($enable));

        return parent::setEnable($enable);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnable', array());

        return parent::getEnable();
    }

    /**
     * {@inheritDoc}
     */
    public function setVersion($version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVersion', array($version));

        return parent::setVersion($version);
    }

    /**
     * {@inheritDoc}
     */
    public function getVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVersion', array());

        return parent::getVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreateDate($createDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreateDate', array($createDate));

        return parent::setCreateDate($createDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreateDate', array());

        return parent::getCreateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateDate($updateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateDate', array($updateDate));

        return parent::setUpdateDate($updateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateDate', array());

        return parent::getUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setDelFlg($delFlg)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDelFlg', array($delFlg));

        return parent::setDelFlg($delFlg);
    }

    /**
     * {@inheritDoc}
     */
    public function getDelFlg()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDelFlg', array());

        return parent::getDelFlg();
    }

    /**
     * {@inheritDoc}
     */
    public function setSource($source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSource', array($source));

        return parent::setSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSource()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSource', array());

        return parent::getSource();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdateStatus($updateStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdateStatus', array($updateStatus));

        return parent::setUpdateStatus($updateStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdateStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdateStatus', array());

        return parent::getUpdateStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setNewVersion($newVersion)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNewVersion', array($newVersion));

        return parent::setNewVersion($newVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getNewVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNewVersion', array());

        return parent::getNewVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastUpdateDate($lastUpdateDate)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastUpdateDate', array($lastUpdateDate));

        return parent::setLastUpdateDate($lastUpdateDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastUpdateDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastUpdateDate', array());

        return parent::getLastUpdateDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setProductUrl($productUrl)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProductUrl', array($productUrl));

        return parent::setProductUrl($productUrl);
    }

    /**
     * {@inheritDoc}
     */
    public function getProductUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProductUrl', array());

        return parent::getProductUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setEccubeVersion($eccube_version)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEccubeVersion', array($eccube_version));

        return parent::setEccubeVersion($eccube_version);
    }

    /**
     * {@inheritDoc}
     */
    public function getEccubeVersion()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEccubeVersion', array());

        return parent::getEccubeVersion();
    }

    /**
     * {@inheritDoc}
     */
    public function getEccubeVersionAsString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEccubeVersionAsString', array());

        return parent::getEccubeVersionAsString();
    }

    /**
     * {@inheritDoc}
     */
    public function getPluginEventHandlers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPluginEventHandlers', array());

        return parent::getPluginEventHandlers();
    }

    /**
     * {@inheritDoc}
     */
    public function addPluginEventHandler(\Eccube\Entity\PluginEventHandler $PluginEventHandler)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPluginEventHandler', array($PluginEventHandler));

        return parent::addPluginEventHandler($PluginEventHandler);
    }

    /**
     * {@inheritDoc}
     */
    public function removePluginEventHandler(\Eccube\Entity\PluginEventHandler $PluginEventHandler)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePluginEventHandler', array($PluginEventHandler));

        return parent::removePluginEventHandler($PluginEventHandler);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', array($offset));

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet($offset, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', array($offset, $value));

        return parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', array($offset));

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset($offset)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', array($offset));

        return parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function setPropertiesFromArray(array $arrProps, array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPropertiesFromArray', array($arrProps, $excludeAttribute, $parentClass));

        return parent::setPropertiesFromArray($arrProps, $excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(array $excludeAttribute = array (
), \ReflectionClass $parentClass = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', array($excludeAttribute, $parentClass));

        return parent::toArray($excludeAttribute, $parentClass);
    }

    /**
     * {@inheritDoc}
     */
    public function copyProperties($srcObject, array $excludeAttribute = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'copyProperties', array($srcObject, $excludeAttribute));

        return parent::copyProperties($srcObject, $excludeAttribute);
    }

}
